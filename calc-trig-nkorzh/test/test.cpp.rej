diff a/test/test.cpp b/test/test.cpp	(rejected hunks)
@@ -10,6 +10,8 @@ class CalcFixture : public ::testing::TestWithParam<bool> {
     
 };
 
+const double eps = 1e-15;
+
 TEST_P(CalcFixture, err)
 {
     auto param = GetParam();
@@ -22,6 +24,18 @@ TEST_P(CalcFixture, err)
     testing::internal::CaptureStderr();
     EXPECT_DOUBLE_EQ(17, process_line(17, param, "\\ 11"));
     EXPECT_EQ("Unknown operation \\ 11\n", testing::internal::GetCapturedStderr());
+    testing::internal::CaptureStderr();
+    EXPECT_DOUBLE_EQ(0, process_line(0, param, "rad"));
+    EXPECT_EQ("Unknown operation rad\n", testing::internal::GetCapturedStderr());
+    testing::internal::CaptureStderr();
+    EXPECT_DOUBLE_EQ(0, process_line(0, param, "CAN"));
+    EXPECT_EQ("Unknown operation CAN\n", testing::internal::GetCapturedStderr());
+    testing::internal::CaptureStderr();
+    EXPECT_DOUBLE_EQ(0, process_line(0, param, "ACON"));
+    EXPECT_EQ("Unknown operation ACON\n", testing::internal::GetCapturedStderr());
+    testing::internal::CaptureStderr();
+    EXPECT_DOUBLE_EQ(0, process_line(0, param, "sin"));
+    EXPECT_EQ("Unknown operation sin\n", testing::internal::GetCapturedStderr());
 }
 
 TEST_P(CalcFixture, set)
@@ -129,98 +143,121 @@ TEST_P(CalcFixture, sqrt)
 
 INSTANTIATE_TEST_SUITE_P(Calc, CalcFixture, ::testing::Values(true, false));
 
+const double sqrt_3 = 1.7320508075688772935274463;
+const double sqrt_3_over_3 = 1.7320508075688772935274463l / 3.0;
+const double half_sqrt_3 = 1.7320508075688772935274463l / 2.0;
+const double half_sqrt_2 = 0.707106781186547524400844;
+
 TEST(Calc, sin)
 {
     bool rad_on = false;
-    EXPECT_DOUBLE_EQ(1, process_line(90, rad_on, "SIN"));
-    EXPECT_DOUBLE_EQ(-1, process_line(-90, rad_on, "SIN"));
-    EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "SIN"));
-    EXPECT_DOUBLE_EQ(0, process_line(180, rad_on, "SIN"));
-    EXPECT_DOUBLE_EQ(0, process_line(360, rad_on, "SIN"));
+    EXPECT_NEAR(0.5, process_line(30, rad_on, "SIN"), eps);
+    EXPECT_NEAR(1, process_line(90, rad_on, "SIN"), eps);
+    EXPECT_NEAR(-1, process_line(-90, rad_on, "SIN"), eps);
+    EXPECT_NEAR(0, process_line(0, rad_on, "SIN"), eps);
+    EXPECT_NEAR(-1, process_line(270, rad_on, "SIN"), eps);
+    EXPECT_NEAR(0, process_line(180, rad_on, "SIN"), eps);
+    EXPECT_NEAR(-half_sqrt_2, process_line(225, rad_on, "SIN"), eps);
+    EXPECT_NEAR(-0.5, process_line(330, rad_on, "SIN"), eps);
+    EXPECT_NEAR(0, process_line(360, rad_on, "SIN"), eps);
+    EXPECT_NEAR(half_sqrt_3, process_line(480, rad_on, "SIN"), eps);
     EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "RAD"));
     ASSERT_TRUE(rad_on);
-    EXPECT_DOUBLE_EQ(1, process_line(M_PI_2, rad_on, "SIN"));
-    EXPECT_DOUBLE_EQ(-1, process_line(-M_PI_2, rad_on, "SIN"));
-    EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "SIN"));
-    EXPECT_DOUBLE_EQ(0, process_line(M_PI * 2, rad_on, "SIN"));
-    EXPECT_DOUBLE_EQ(0, process_line(M_PI * 4, rad_on, "SIN"));
+    EXPECT_NEAR(1, process_line(M_PI_2, rad_on, "SIN"), eps);
+    EXPECT_NEAR(-1, process_line(-M_PI_2, rad_on, "SIN"), eps);
+    EXPECT_NEAR(0, process_line(0, rad_on, "SIN"), eps);
+    EXPECT_NEAR(0, process_line(M_PI * 2, rad_on, "SIN"), eps);
+    EXPECT_NEAR(0, process_line(M_PI * 4, rad_on, "SIN"), eps);
+    EXPECT_NEAR(0.5, process_line(M_PI * 5 / 6, rad_on, "SIN"), eps);
+    EXPECT_NEAR(-half_sqrt_2, process_line(M_PI * 7 / 4, rad_on, "SIN"), eps);
     EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "DEG"));
     ASSERT_FALSE(rad_on);
-    EXPECT_DOUBLE_EQ(1, process_line(90, rad_on, "SIN"));
-    EXPECT_DOUBLE_EQ(-1, process_line(-90, rad_on, "SIN"));
-    EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "SIN"));
-    EXPECT_DOUBLE_EQ(0, process_line(180, rad_on, "SIN"));
-    EXPECT_DOUBLE_EQ(0, process_line(360, rad_on, "SIN"));
+    EXPECT_NEAR(1, process_line(90, rad_on, "SIN"), eps);
+    EXPECT_NEAR(-1, process_line(-90, rad_on, "SIN"), eps);
+    EXPECT_NEAR(0, process_line(0, rad_on, "SIN"), eps);
+    EXPECT_NEAR(0, process_line(180, rad_on, "SIN"), eps);
+    EXPECT_NEAR(0, process_line(360, rad_on, "SIN"), eps);
 }
 
 TEST(Calc, cos)
 {
     bool rad_on = false;
-    EXPECT_DOUBLE_EQ(0, process_line(90, rad_on, "COS"));
-    EXPECT_DOUBLE_EQ(1, process_line(0, rad_on, "COS"));
-    EXPECT_DOUBLE_EQ(-1, process_line(180, rad_on, "COS"));
-    EXPECT_DOUBLE_EQ(1, process_line(360, rad_on, "COS"));
+    EXPECT_NEAR(0, process_line(90, rad_on, "COS"), eps);
+    EXPECT_NEAR(1, process_line(0, rad_on, "COS"), eps);
+    EXPECT_NEAR(half_sqrt_3, process_line(30, rad_on, "COS"), eps);
+    EXPECT_NEAR(0.5, process_line(60, rad_on, "COS"), eps);
+    EXPECT_NEAR(-1, process_line(180, rad_on, "COS"), eps);
+    EXPECT_NEAR(1, process_line(360, rad_on, "COS"), eps);
     EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "RAD"));
     ASSERT_TRUE(rad_on);
     ASSERT_TRUE(rad_on);
-    EXPECT_DOUBLE_EQ(0, process_line(M_PI_2, rad_on, "COS"));
-    EXPECT_DOUBLE_EQ(1, process_line(0, rad_on, "COS"));
-    EXPECT_DOUBLE_EQ(-1, process_line(M_PI, rad_on, "COS"));
-    EXPECT_DOUBLE_EQ(1, process_line(M_PI * 2, rad_on, "COS"));
+    EXPECT_NEAR(0, process_line(M_PI_2, rad_on, "COS"), eps);
+    EXPECT_NEAR(1, process_line(0, rad_on, "COS"), eps);
+    EXPECT_NEAR(-1, process_line(M_PI, rad_on, "COS"), eps);
+    EXPECT_NEAR(1, process_line(M_PI * 2, rad_on, "COS"), eps);
+    EXPECT_NEAR(-half_sqrt_2, process_line(M_PI * 3 / 4, rad_on, "COS"), eps);
+    EXPECT_NEAR(half_sqrt_3, process_line(M_PI * 11 / 6, rad_on, "COS"), eps);
     EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "DEG"));
     ASSERT_FALSE(rad_on);
-    EXPECT_DOUBLE_EQ(0, process_line(90, rad_on, "COS"));
-    EXPECT_DOUBLE_EQ(1, process_line(0, rad_on, "COS"));
-    EXPECT_DOUBLE_EQ(-1, process_line(180, rad_on, "COS"));
-    EXPECT_DOUBLE_EQ(1, process_line(360, rad_on, "COS"));
+    EXPECT_NEAR(0, process_line(90, rad_on, "COS"), eps);
+    EXPECT_NEAR(1, process_line(0, rad_on, "COS"), eps);
+    EXPECT_NEAR(-1, process_line(180, rad_on, "COS"), eps);
+    EXPECT_NEAR(1, process_line(360, rad_on, "COS"), eps);
 }
 
 TEST(Calc, tan)
 {
+    const double near_inf = 1.633123935319537e+16;
     bool rad_on = false;
-    EXPECT_DOUBLE_EQ(1, process_line(45, rad_on, "TAN"));
-    EXPECT_DOUBLE_EQ(-1, process_line(-45, rad_on, "TAN"));
-    EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "TAN"));
-    EXPECT_DOUBLE_EQ(0, process_line(180, rad_on, "TAN"));
-    EXPECT_DOUBLE_EQ(0, process_line(360, rad_on, "TAN"));
-    EXPECT_TRUE(std::isinf(process_line(90, rad_on, "TAN")));
+    EXPECT_NEAR(1, process_line(45, rad_on, "TAN"), eps);
+    EXPECT_NEAR(-1, process_line(-45, rad_on, "TAN"), eps);
+    EXPECT_NEAR(0, process_line(0, rad_on, "TAN"), eps);
+    EXPECT_NEAR(sqrt_3_over_3, process_line(30, rad_on, "TAN"), eps);
+    EXPECT_NEAR(sqrt_3, process_line(60, rad_on, "TAN"), eps);
+    EXPECT_NEAR(0, process_line(180, rad_on, "TAN"), eps);
+    EXPECT_NEAR(0, process_line(360, rad_on, "TAN"), eps);
+    EXPECT_DOUBLE_EQ(near_inf, process_line(90, rad_on, "TAN"));
     EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "RAD"));
     ASSERT_TRUE(rad_on);
-    EXPECT_DOUBLE_EQ(1, process_line(M_PI_4, rad_on, "TAN"));
-    EXPECT_DOUBLE_EQ(-1, process_line(-M_PI_4, rad_on, "TAN"));
-    EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "TAN"));
-    EXPECT_DOUBLE_EQ(0, process_line(M_PI, rad_on, "TAN"));
-    EXPECT_DOUBLE_EQ(0, process_line(M_PI * 2, rad_on, "TAN"));
-    EXPECT_TRUE(std::isinf(process_line(M_PI_2, rad_on, "TAN")));
+    EXPECT_NEAR(1, process_line(M_PI_4, rad_on, "TAN"), eps);
+    EXPECT_NEAR(-1, process_line(-M_PI_4, rad_on, "TAN"), eps);
+    EXPECT_NEAR(0, process_line(0, rad_on, "TAN"), eps);
+    EXPECT_NEAR(0, process_line(M_PI, rad_on, "TAN"), eps);
+    EXPECT_NEAR(0, process_line(M_PI * 2, rad_on, "TAN"), eps);
+    EXPECT_NEAR(sqrt_3_over_3, process_line(M_PI * 7 / 6, rad_on, "TAN"), eps);
+    EXPECT_DOUBLE_EQ(near_inf, process_line(M_PI_2, rad_on, "TAN"));
     EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "DEG"));
     ASSERT_FALSE(rad_on);
-    EXPECT_DOUBLE_EQ(1, process_line(45, rad_on, "TAN"));
-    EXPECT_DOUBLE_EQ(-1, process_line(-45, rad_on, "TAN"));
-    EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "TAN"));
-    EXPECT_DOUBLE_EQ(0, process_line(180, rad_on, "TAN"));
-    EXPECT_DOUBLE_EQ(0, process_line(360, rad_on, "TAN"));
-    EXPECT_TRUE(std::isinf(process_line(90, rad_on, "TAN")));
+    EXPECT_NEAR(1, process_line(45, rad_on, "TAN"), eps);
+    EXPECT_NEAR(-1, process_line(-45, rad_on, "TAN"), eps);
+    EXPECT_NEAR(0, process_line(0, rad_on, "TAN"), eps);
+    EXPECT_NEAR(0, process_line(180, rad_on, "TAN"), eps);
+    EXPECT_NEAR(0, process_line(360, rad_on, "TAN"), eps);
+    EXPECT_DOUBLE_EQ(near_inf, process_line(90, rad_on, "TAN"));
 }
 
 TEST(Calc, ctn)
 {
     bool rad_on = false;
-    EXPECT_DOUBLE_EQ(1, process_line(45, rad_on, "CTN"));
-    EXPECT_DOUBLE_EQ(std::sqrt(3), process_line(30, rad_on, "CTN"));
+    EXPECT_NEAR(1, process_line(45, rad_on, "CTN"), eps);
+    EXPECT_NEAR(sqrt_3, process_line(30, rad_on, "CTN"), eps);
     EXPECT_TRUE(std::isinf(process_line(0, rad_on, "CTN")));
-    EXPECT_DOUBLE_EQ(0, process_line(90, rad_on, "CTN"));
+    EXPECT_NEAR(0, process_line(90, rad_on, "CTN"), eps);
     EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "RAD"));
     ASSERT_TRUE(rad_on);
-    EXPECT_DOUBLE_EQ(1, process_line(M_PI_4, rad_on, "CTN"));
-    EXPECT_DOUBLE_EQ(std::sqrt(3), process_line(M_PI / 6, rad_on, "CTN"));
+    EXPECT_NEAR(1, process_line(M_PI_4, rad_on, "CTN"), eps);
+    EXPECT_NEAR(sqrt_3, process_line(M_PI / 6, rad_on, "CTN"), eps);
     EXPECT_TRUE(std::isinf(process_line(0, rad_on, "CTN")));
-    EXPECT_DOUBLE_EQ(0, process_line(M_PI_2, rad_on, "CTN"));
+    EXPECT_NEAR(0, process_line(M_PI_2, rad_on, "CTN"), eps);
+    EXPECT_NEAR(1, process_line(M_PI_4 * 5, rad_on, "CTN"), eps);
+    EXPECT_NEAR(-sqrt_3_over_3, process_line(M_PI * 5 / 3, rad_on, "CTN"), eps);
     EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "DEG"));
     ASSERT_FALSE(rad_on);
-    EXPECT_DOUBLE_EQ(1, process_line(45, rad_on, "CTN"));
-    EXPECT_DOUBLE_EQ(std::sqrt(3), process_line(30, rad_on, "CTN"));
+    EXPECT_NEAR(1, process_line(45, rad_on, "CTN"), eps);
+    EXPECT_NEAR(sqrt_3, process_line(30, rad_on, "CTN"), eps);
+    EXPECT_NEAR(sqrt_3_over_3, process_line(60, rad_on, "CTN"), eps);
     EXPECT_TRUE(std::isinf(process_line(0, rad_on, "CTN")));
-    EXPECT_DOUBLE_EQ(0, process_line(90, rad_on, "CTN"));
+    EXPECT_NEAR(0, process_line(90, rad_on, "CTN"), eps);
 }
 
 TEST(Calc, asin)
@@ -284,13 +321,15 @@ TEST(Calc, actn)
 {
     bool rad_on = false;
     EXPECT_DOUBLE_EQ(45, process_line(1, rad_on, "ACTN"));
-    EXPECT_DOUBLE_EQ(30, process_line(std::sqrt(3), rad_on, "ACTN"));
+    EXPECT_DOUBLE_EQ(30, process_line(sqrt_3, rad_on, "ACTN"));
     EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "RAD"));
     ASSERT_TRUE(rad_on);
     EXPECT_DOUBLE_EQ(M_PI_4, process_line(1, rad_on, "ACTN"));
-    EXPECT_DOUBLE_EQ(M_PI / 6, process_line(std::sqrt(3), rad_on, "ACTN"));
+    EXPECT_DOUBLE_EQ(M_PI / 6, process_line(sqrt_3, rad_on, "ACTN"));
+    EXPECT_DOUBLE_EQ(M_PI / 3, process_line(sqrt_3_over_3, rad_on, "ACTN"));
     EXPECT_DOUBLE_EQ(0, process_line(0, rad_on, "DEG"));
     ASSERT_FALSE(rad_on);
     EXPECT_DOUBLE_EQ(45, process_line(1, rad_on, "ACTN"));
-    EXPECT_DOUBLE_EQ(30, process_line(std::sqrt(3), rad_on, "ACTN"));
+    EXPECT_DOUBLE_EQ(30, process_line(sqrt_3, rad_on, "ACTN"));
+    EXPECT_DOUBLE_EQ(120, process_line(-sqrt_3_over_3, rad_on, "ACTN"));
 }
